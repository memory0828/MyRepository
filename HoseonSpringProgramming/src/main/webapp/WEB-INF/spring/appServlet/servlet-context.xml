<?xml version="1.0" encoding="UTF-8"?><!-- xml 선언하는 법 -->
<!-- version은 xml의  스팩버전/UTF-8은 이아래서 사용되는 문자셋 -->
<!-- xml은 루트 엘리먼트는 하나만 있어야한다.(=제일 바깥쪽 테그는 하나만 있어야한다. 나머지는 안쪽에 들어가있어야한다) -->
<!-- <booklist>       .....<>..</>..나머지들....   </booklist>      --> 
<!-- <booklist>       .....<>..</>..나머지들....   </booklist>   이렇게 두게 있으면 xml규칙에 위배됨   -->

<!--  beans가 루트 엘리먼트임  -->
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- ■0. com.mycompany.myapp 이 안에있는 @어노테이션Controller를 조사해서 객체 생성해줌! -->
	<context:component-scan base-package="com.mycompany.myapp" />
	
	<!-- 관리 객체 생성 및 의존성 주입(요즘에는 이런 방식 잘 안씀, 하지만 옛날에는 많이 썼으니 알아두기!) -->
	<!--  ■1. 관리객체 생성(been 태그 쓰기)-->	
	<!--  ●1-1. B를 관리객체 생성(been 태그 쓰기)
	             역할 : 스프링이 관리하던 객체중에서 b라는 객체가 없으면 생성해서 관리하는 역할이고 이때 관리하는 이름으로 b를 준다
	           - 맨 첫 라인의 xmlns:beans="http://www.springframework.org/schema/beans" 를 이용해서 접두사 사용 -->
	<!-- <beans:bean id="bObj" class = "com.mycompany.myapp.exam09.B" /> 이거나 아래꺼나 똑같은 id와 name 쓰는 차이일뿐-->
	<beans:bean name="bObj" class="com.mycompany.myapp.exam09.B" />
	<!--</ beans:bean> 이 빈사이에 내용이있으면 이 마지막맺음을 사용하는데 없으니 위에서 그냥 />식으로 끝내버리니 이거 지워야함-->
	<!--  ●1-2. (복습으로 추가됨)A를 관리객체 생성(been 태그 쓰기)-->
	<beans:bean name="aObj" class="com.mycompany.myapp.exam09.A" />
	<!--  ●1-3. (복습으로 추가됨)-->
	<beans:bean name="serviceAObj" class="com.mycompany.myapp.exam09.ServiceA"/>
	<beans:bean name="serviceBObj" class="com.mycompany.myapp.exam09.ServiceB"/>
	<!--  ●1-4. 인터페이스를 사용하는 방법(이를 통해서 유지보수의 편리성확보!)-->
	<beans:bean name="serviceCImplObj" class="com.mycompany.myapp.exam09.ServiceCImple1"/>
	<beans:bean name="serviceDImplObj" class="com.mycompany.myapp.exam09.ServiceDImple1"/>
	
	<!--  ■2. Exam08Controller 객체를 찾아서 가져오기(이미 만들어져있는거 찾아오는 개념)
	             역할 : 이아래 코드를 쓴다고 객체를 새로 만드는게 아니라 기존에 만들어져있을걸 가져오는 거다
		  	   - ■0을 통해서 처리되었듯이 Exam08Controller로 가보면 
		  	     @어노테이션Controller로 선언되어있어서 이미 객체로 만들어져 있기 때문에 찾아서 가져오는거 -->
	<!--<beans:bean class="com.mycompany.myapp.exam09.Exam09Controller"/>
	그럼 여기서 name은 지정안했는데, 보통 클래스의 첫자를 소문자로 등록함 아래처럼~~!
	알쏭달송!:그런데 여기서 Exam09Controller은 @Controller가 선언되어있기 때문에 이미 객체가 만들어져있고 관리객체가 되어있다.
	            그래서 객체가만들어질때 위에서 말한 클래스의 첫자를 소문자로 처리해서 자동 객체를 생성함으로
	            exam09Controller 이 되어있다. 그래서 이 아래소스는 위에 관리객체 생성처럼 생성처리가 되는게 아니라
	            가져다 쓴다는 개념이 되는거다(관리객체는 DI컨테이너에 하나만 생성됨으로)
	            돌려서 생각하면 @Controller가 만약 Exam09Controller에서 지워지면
	            이 아래소스는 관리객체 생성을 뜻하는 소스가 된다.  -->
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">

		<!-- 이 아래부터 <setter를 호출하는거고 setter메소드를 쓰는데 settter 메소드이름에서 set글자를 빼고 첫자를 소문자로하는 이름이 쓰임  -->
		<!-- Setter 주입( = property는 결국 Setter 주입하는거임 )	
		<beans:property name="setter이름" ref="매개값으로 전달할 객채(관리객체이름)"/>
			다시
			ref="매개값으로 전달할 객채(관리객체이름)
			또 value="매개변수에 전달할 내용(인수값) 임"
		 -->	
		 <!-- 결국 이 아랫 부분이 Setter 주입이 되고 이걸 통해서 Setter 주입 기능이 실행됨 -->
		 
		<beans:property name="bxx" ref="bObj"/> 
		<beans:property name="axx" ref="aObj"/>
		<beans:property name="serviceAxx" ref="serviceAObj"/>		
		<beans:property name="serviceBxx" ref="serviceBObj"/>		
		<beans:property name="serviceCxx" ref="serviceCImplObj"/>		
		<beans:property name="serviceDxx" ref="serviceDImplObj"/>		
	</beans:bean>

</beans:beans>
